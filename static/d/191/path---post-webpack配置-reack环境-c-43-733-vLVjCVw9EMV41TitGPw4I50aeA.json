{"data":{"markdownRemark":{"html":"<p><strong>感想：不想当门外汗，就直接看一手资料，少去看别人教程。</strong></p>\n<p>网上的好多教程都有些过时了，要么是“年代久远”（现在都 2018 年了，而过期教程都是 15,16），要么就是时效过了（webpack 4 都发布好久了结果升级指南普遍是刚发布时的资讯状态）。而且不同教程的配置通常存在不同之处，有时就难以理解和分辨。还是官网的信息发布及时准确，比起去折腾“多样化”的配置方案，遵照官方的建议实在省力多了。我不建议你直接使用本仓库配置，因为这只是我的个人 webpack 模板，生搬硬套不一定适合你。</p>\n<p>之前依葫芦画瓢搞过 Webpack 的 React 配置。再配置就忘得差不多了。于是建了这个仓库，做一个 Webpack + React 的示例，以做备忘。</p>\n<h1>需要的包</h1>\n<ul>\n<li>babel-core\n<br /> babel 核心库</li>\n<li>babel-loader</li>\n<li>babel-preset-env\n<br /> 读取<code class=\"language-text\">.babelrc</code>中的配置信息，使得 babel 根据你的配置进行 compile\n<br /> @ref <a href=\"https://github.com/babel/babel/tree/master/packages/babel-preset-env\">https://github.com/babel/babel/tree/master/packages/babel-preset-env</a>\n<br /> @ref <a href=\"https://babeljs.io/docs/plugins/preset-env\">https://babeljs.io/docs/plugins/preset-env</a></li>\n<li>babel-preset-react\n<br /> compile JSX 语法\n<br /> @ref <a href=\"https://babeljs.io/\">https://babeljs.io/</a></li>\n<li>css-loader</li>\n<li>extract-text-webpack-plugin\n<br /> 从 bundle 文件中分离出单独的文件\n<br /> @ref <a href=\"https://webpack.js.org/plugins/extract-text-webpack-plugin/#src/components/Sidebar/Sidebar.jsx\">https://webpack.js.org/plugins/extract-text-webpack-plugin/#src/components/Sidebar/Sidebar.jsx</a></li>\n<li>file-loader\n<br /> 令 webpack 返回指定对象的公开 URL\n<br /> @ref <a href=\"https://webpack.js.org/loaders/file-loader/\">https://webpack.js.org/loaders/file-loader/</a></li>\n<li>html-loader\n<br /> @ref <a href=\"https://webpack.js.org/loaders/html-loader/\">https://webpack.js.org/loaders/html-loader/</a></li>\n<li>html-webpack-plugin\n<br /> 新建和你生成的 *.bundle.js 搭配的 HTML 文件。</li>\n<li>mini-css-extract-plugin</li>\n<li>style-loader\n<br /> @ref <a href=\"https://webpack.js.org/loaders/style-loader/\">https://webpack.js.org/loaders/style-loader/</a></li>\n<li>webpack</li>\n<li>webpack-cli</li>\n<li>webpack-dev-server</li>\n<li>webpack-merge</li>\n</ul>\n<h1>.babelrc</h1>\n<p>一开始我也一脸蒙蔽(bi),<code class=\"language-text\">.babelrc</code>文件是干啥的？有的教程只是告诉你这样写就对了，不知其所以然。但是 Babel 的<a href=\"https://babeljs.io/docs/usage/babelrc/\">官网</a>上这个问题实际上将得很清楚。</p>\n<p>我的理解是<code class=\"language-text\">.babelrc</code>实际上就是和一个配置文件，性质和作用和<code class=\"language-text\">webpack.config.js</code>差不多。不过文件是被 Babel 读取，解释。而且初学者只会接触到这样的配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>这段配置非常简短，也就导致更不易理解。</p>\n<p>一步一步解释。</p>\n<!--我猜想 -->Babel 在读取这个文件后会调用`parsing JSON`函数，将其转化为一个 JS 对象。`{ ... }`这对大括号以及其里面格式就不难理解。这个文件本质上应该是一个 JSON 文件。你可以删掉一个花括号，看一下报错。\n<p>那里面的<code class=\"language-text\">&quot;presets&quot;</code>又是什么意思？</p>\n<p>这个相当于声明你要使用的 <em>preset</em> ，比如上面的 <code class=\"language-text\">env</code>，<code class=\"language-text\">react</code> 就分别指之前安装的 <code class=\"language-text\">babel-preset-env</code>， <code class=\"language-text\">babel-preset-react</code>。</p>\n<p>emmm， <strong>preset</strong>又是什么东东？</p>\n<p>这是在官网找到的解释。</p>\n<blockquote>\n<p>Babel preset that automatically determines the Babel plugins you need based on your supported environments.</p>\n</blockquote>\n<p>意思差不多就是：预先选择在你支持的运行环境上所需要的 Babel 编译插件。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token string\">\"env\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"chrome\"</span><span class=\"token operator\">:</span> <span class=\"token number\">52</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这表示 Babel 最终编译出来的文件要支持在 Chrome 52 上运行。</p>\n<p>而我们只有<code class=\"language-text\">&quot;env&quot;</code>就是使用默认设置，<strong>把 ES2015+ 的语法 complie 成 ES2015 以前的</strong>。</p>\n<p><code class=\"language-text\">&#39;react&#39;</code>就是指让 Babel complie JSX 的语法。去掉这个配置的话凡是有 JSX 语法的地方都会报错。</p>\n<!-- \n# Webpack config\n\n> > > To Be Continue -->","frontmatter":{"title":"webpack配置Reack环境","tags":["wabpack","react","babel"]},"excerpt":"感想：不想当门外汗，就直接看一手资料，少去看别人教程。 网上的好多教程都有些过时了，要么是“年代久远”（现在都 2018 年了，而过期教程都是 15,16），要么就是时效过了（webpack…"}},"pageContext":{"slug":"/post/webpack配置Reack环境","pre":"/post/ESLint","next":"/post/一个简单的抽奖例子","tags":["wabpack","eslint","react","babel","javascript","algorihm","linix","app","git","gogs","nginx","proxy","ruby","language","php","shell","cpp","language-feature","c","recursion","java","jsp","mysql","atom","markdown","nodejs","error"]}}