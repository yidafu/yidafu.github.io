{"data":{"markdownRemark":{"html":"<h1>由头</h1>\n<p>之前在《深入理解PHP内核》一书中看到了用函数作为结构体的属性，想到用　C　语言来模拟实现面对对象。</p>\n<h2>具体实现</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> Class <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> _param<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span> _construct <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span> function <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span> _destory <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Class<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span> Instance this<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> param <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    this<span class=\"token operator\">-></span>_param <span class=\"token operator\">=</span> param<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is construct function\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>Instance this<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a function called %d\\n\"</span><span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>_param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">destory</span><span class=\"token punctuation\">(</span>Instance this<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    this<span class=\"token operator\">-></span>_param <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is detory function\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> Class Object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">,</span> destory <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">_construct</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>Object<span class=\"token punctuation\">,</span> <span class=\"token number\">666</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">_destory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>解释</h2>\n<h3>＂方法＂</h3>\n<p>主要的一个知识点就是 C 语言中，函数是可以已指针的形式被传递（<strong>函数指针</strong>）．</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> next <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> index <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里就是把一个比较函数<code class=\"language-text\">compare()</code>传入<code class=\"language-text\">sort()</code>函数里面．实现了自定义排序过程．这样的做法，动态语言里面比较常见．</p>\n<p>＂模拟类＂也是同样的原理．我们把结构体的属性设为函数指针，结构体通过访问函数指针属性来调用函数，由此来模拟＂方法＂．</p>\n<h3>\"this\"</h3>\n<p>实际上，纯　C 实现＂类＂内部实现<code class=\"language-text\">this</code>是很不现实的．早期的　C++ 没有底层实现 this 的指向，而是将　C++ 代码编译成　C ，在这个过程中使用了一点小把戏：在编译成　C 代码的过程中，给所有的类的＂方法＂的参数列表添加一个参数，而这个参数就是指向实例的一个指针．</p>\n<h2>总结</h2>\n<p>C 语言，最为强大之处莫过于它的指针了．教材所学，它的一点精髓都没有，同志任需努力呀！</p>","frontmatter":{"title":"C模拟实现类","tags":["cpp","algorihm"]},"excerpt":"由头 之前在《深入理解PHP内核》一书中看到了用函数作为结构体的属性，想到用　C　语言来模拟实现面对对象。 具体实现 解释 ＂方法＂ 主要的一个知识点就是 C…"}},"pageContext":{"slug":"/post/C模拟实现类","pre":"/post/PHP命令行脚本","next":"/post/二叉树的中序非递归遍历","tags":["wabpack","eslint","react","babel","javascript","algorihm","linix","app","git","gogs","nginx","proxy","ruby","language","php","shell","cpp","language-feature","c","recursion","java","jsp","mysql","atom","markdown","nodejs","error"]}}