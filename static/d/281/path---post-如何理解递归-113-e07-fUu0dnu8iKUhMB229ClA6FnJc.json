{"data":{"markdownRemark":{"html":"<h1>前话</h1>\n<p>初学 Clang ，就接触过递归（那个要死人的汉诺塔）。但是一直不理解，递归是如果实现的。听数据结构老师的一堂课，感觉有所收获，故记录下来。</p>\n<!--more-->\n<h1>正文</h1>\n<p>一般来说在可以用递归的地方,同样是可以用 for 循环实现的。相比而言使用递归会有程序“爆炸”的可能。尽管如此递归依旧有着用武之地，比如在二叉树的遍历上。用来递归遍历二叉树的函数是如此简洁又是那么强大，完全的体现了递归的强大之处。</p>\n<h2>一个只能是例子的例子</h2>\n<p>最简单的使用递归的例子就是：阶乘的计算。<strong>请一定不要在实际中使用递归去计算阶乘。</strong> 这是个很不好的实践，效率比不上 for 循环。但为了简单起见，我们先从这个例子开始。</p>\n<h3><strong>小二上代码：</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> multiplier <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>发生了什么？？就这样结束了？？</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>是不是这句特别难理解？别急，我们慢慢来。</p>\n<p>来看看同样简洁的 for 循环实现的：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">int</span> factrial <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> multiplier <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> multiplier <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> multiplier <span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">*</span><span class=\"token operator\">=</span> multiplier<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>两个函数都实现了同样的阶乘计算。相比而言，第一个似乎不好理解。</p>\n<h3>发生了什么</h3>\n<p>for 循环比较简单，就不细说。第一个递归是如何实现阶乘的计算呢？</p>\n<p>再解释之前，都有个函数调用的概念。何为函数调用？就是在一个函数里面调用另一个函数。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">void</span> functionA <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm functionA!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> functionB <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">functionA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I called the functionA!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">functionB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里<code class=\"language-text\">main</code>调用了<code class=\"language-text\">functionB</code>，<code class=\"language-text\">functionB</code>调用了<code class=\"language-text\">functionA</code>，而递归则是一种特殊的调用，即：<strong>自己调用自己</strong>。上面的就是<code class=\"language-text\">factrial</code>调用<code class=\"language-text\">factrial</code>，再是<code class=\"language-text\">factrial</code>调用<code class=\"language-text\">factrial</code>，这样重复掉用。如果没有结束条件，很显然地自己调用自己的过程会无限地进行下去，即死循环了。</p>\n<p>有了这样的基础以后，再来理解一下之前的阶乘递归算法。</p>\n<p>先复习一下（假定传入的实参是3）：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">                <span class=\"token comment\">// multiplier == 3</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> multiplier <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// 下一步，把这个函数展开</span>\n        <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>第一次递归：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">                <span class=\"token comment\">// multiplier == 3</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> multiplier <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// mutiplier == 3，传入的是 mutiplier - 1 == 2</span>\n        <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token comment\">// 此时，传入的 mutiplier == 2 != 1</span>\n                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token comment\">// 走到这里了，下一步继续展开 factrial()</span>\n                                    <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>实际上，如果我们把每次递归的函数展开，递归就不难理解了。上面的代码看起来就是就像是顺序执行了。</p>\n<p>为了便于展示忽略第一层递归。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token comment\">// mutiplier == 3，传入的是 mutiplier - 1 == 2</span>\n<span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 此时，传入的 mutiplier == 2 != 1</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 走到这里了，下一步继续展开 factrial()</span>\n        <span class=\"token comment\">// mutiplier == 2，传入的是 mutiplier - 1 == 1</span>\n        <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 此时，传入的 mutiplier == 2 != 1</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// 走到这里了，这里递归到底了，回去执行 multiplier * { return 1 }</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// !!! 最后一次没有走到这里</span>\n                        <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> multiplier <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>从这里就可以及清晰地理解递归了。</p>\n<p>整个过程可以简化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">factrial <span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> factrial <span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">factrial</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>后话</h1>\n<p>这篇介绍暂到这里，后面有空再修改修改。</p>","frontmatter":{"title":"如何理解递归"}}},"pageContext":{"slug":"/post/如何理解递归","pre":"/post/二叉树的中序非递归遍历","next":"/post/java链接MySQL","tags":["wabpack","eslint","javascript","axios","api","react","babel","algorihm","linix","app","git","gogs","nginx","proxy","ruby","language","php","shell","cpp","language-feature","c","recursion","java","jsp","mysql","atom","markdown","nodejs","error"]}}