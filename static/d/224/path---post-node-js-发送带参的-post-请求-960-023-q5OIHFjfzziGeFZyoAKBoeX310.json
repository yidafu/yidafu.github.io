{"data":{"markdownRemark":{"html":"<h1>开头总要有几句话</h1>\n<p>nodeJs 非常容易的可以进行路由分配，发送相应的 HTML 代码。但，实际运用中涉及到了 nodeJS 的另一个主要用途就是做一个中间层。这就要求到了用 nodeJS 做 http 请求。也就是说：前端发送请求到 nodeJS 指定的 URL 地址，nodeJS 在处理这个 URL 时向后端发送一个数据请求，最后把从后端得到的数据做一层渲染或处理。所以，如何在 nodeJS 里发起一个 http 请求呢？</p>\n<!--more-->\n<h1>使用到的方法</h1>\n<p><code class=\"language-text\">http.request()</code>在 nodeJS 里主要用于发起 http 请求的方法。</p>\n<p>使用时需要传入一个<code class=\"language-text\">options</code>对象和一个回调函数，返回一个对象 <code class=\"language-text\">http.clienRequest</code>对象。</p>\n<p>这个返回的对象可以通过进一步事件监听来处理事务逻辑。</p>\n<h2>被坑的地方</h2>\n<p>在网上找了很多的代码，都是在传入的<code class=\"language-text\">http.request()</code>的回调函数的里监听<code class=\"language-text\">res</code>对象。我遇到过一个迷之 BUG。昨天，我在这个回调函数用外层的<code class=\"language-text\">res.send()</code>方法来发送请求，它不行！刚刚试了一下好像又可以了！！它可以了！！！由于年代久远，没有前面的代码对比，这当一个未解之谜吧。</p>\n<p>我在 API 文档里看了半天找到另一种解决方式。把<code class=\"language-text\">http.request()</code>方茴的对象定义为<code class=\"language-text\">send</code>(避免变量名重名)。监听<code class=\"language-text\">send</code>对象的<code class=\"language-text\">reponse</code>和<code class=\"language-text\">end</code>事件。</p>\n<h1>小二！上代码</h1>\n<p><strong>外层函数，下面的都是放在这个函数里的</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> querystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'querystring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 下面代码放这里</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>方案一：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> postData <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        jsonList<span class=\"token punctuation\">:</span> <span class=\"token string\">'这是测试数据6666'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">var</span>  options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hostname<span class=\"token punctuation\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/formSql/insertData'</span><span class=\"token punctuation\">,</span>\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">:</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">byteLength</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> getData <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> send <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>innerres<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    innerres<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    innerres<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        data <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    innerres<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'响应结束！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsend<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>postData <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsend<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>方案二：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> postData <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        jsonList<span class=\"token punctuation\">:</span> <span class=\"token string\">'这是测试数据8888'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span>  options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hostname<span class=\"token punctuation\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/formSql/insertData'</span><span class=\"token punctuation\">,</span>\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">:</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">byteLength</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> getData <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> send <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsend<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>postData <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsend<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>onres<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'on response'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    onres<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data  <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    onres<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsend<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求遇到问题: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsend<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"nodeJS 发送带参的 POST 请求","tags":["JavaScript","NodeJS"]},"excerpt":"开头总要有几句话 nodeJs 非常容易的可以进行路由分配，发送相应的 HTML 代码。但，实际运用中涉及到了 nodeJS 的另一个主要用途就是做一个中间层。这就要求到了用 nodeJS 做 http 请求。也就是说：前端发送请求到 nodeJS 指定的 URL…"}},"pageContext":{"slug":"/post/nodeJS 发送带参的 POST 请求","pre":"/post/atom下Markdown写作指南","next":"/post/祭奠服务器再一次炸掉","tags":["wabpack","eslint","javascript","axios","api","react","babel","linix","app","algorihm","git","gogs","nginx","proxy","ruby","language","php","shell","cpp","language-feature","c","recursion","java","jsp","mysql","atom","markdown","nodejs","error"]}}